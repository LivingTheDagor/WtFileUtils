//
// Created by sword on 7/28/2025.
//

//#define _CRTDBG_MAP_ALLOC

//#include <crtdbg.h>
#if defined(_MSC_VER)
#define iswindows
#elif defined(__MINGW64__)
#define iswindows
#else
#define islinux
#endif


#include "VROMFs.h"
#include "DataBlock.h"
#include <chrono>
#include <array>
#include "reader.h"
#include <fstream> // For ifstream, ofstream, and fstream
void exec_code()
{
    std::cout << "womp womp\n";
    auto start = std::chrono::high_resolution_clock::now();
    #ifdef islinux
    auto v = VROMFs(R"(/mnt/c/Users/samue/PycharmProjects/WtFileUtils/src-cpp/testFiles/aces.vromfs.bin)");
    auto path = R"(/tmp/dump/vromfsDump)";
    #endif
    #ifdef iswindows
    auto v = VROMFs(R"(C:/Users/samue/PycharmProjects/WtFileUtils/src-cpp/testFiles/aces.vromfs.bin)");
    auto path = R"(C:/Temp/dump)";
    #endif
    auto dir = v.getDirectory();
    //auto f = (*dir)["config"]["wpcost.blk"];
    //auto file = f.asFile();
    //if (std::filesystem::exists(path)) {
    //    std::filesystem::remove_all(path);
    //}
    //size_t NUM_THREADS = std::thread::hardware_concurrency()-4;
    //ThreadPool pool(NUM_THREADS ? NUM_THREADS : 4);

    dir->callSaveForAllFiles();
    int*x = new int(1);
    //pool.join();
    auto end = std::chrono::high_resolution_clock::now();

    // Calculate the duration
    std::chrono::duration<double> duration = end - start;

    std::cout << "Execution time: " << duration.count() << " seconds" << std::endl;

}

void test_datablock()
{
    constexpr std::array<uint8_t, 256> data = {
    0x01, 0x09, 0x47, 0x6E, 0x61, 0x6D, 0x65, 0x00, 0x74, 0x65, 0x61, 0x6D, 0x73, 0x00, 0x74, 0x65,
    0x61, 0x6D, 0x41, 0x00, 0x70, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x4D, 0x61, 0x78, 0x53, 0x70, 0x61,
    0x77, 0x6E, 0x73, 0x00, 0x73, 0x70, 0x61, 0x77, 0x6E, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x00, 0x6C,
    0x69, 0x6D, 0x69, 0x74, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x00, 0x61, 0x69, 0x72, 0x00, 0x74,
    0x61, 0x6E, 0x6B, 0x00, 0x74, 0x65, 0x61, 0x6D, 0x42, 0x00, 0x06, 0x09, 0x0B, 0x73, 0x68, 0x61,
    0x72, 0x65, 0x64, 0x50, 0x6F, 0x6F, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x02, 0x08, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x02, 0x08, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x02, 0x08, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x02, 0x08, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x01, 0x01, 0x02, 0x00, 0x02, 0x02, 0x03, 0x02, 0x01, 0x04, 0x09, 0x02, 0x01, 0x05,
    0x06, 0x02, 0x00, 0x06, 0x02, 0x00, 0x2E, 0x34, 0x9A, 0x5C, 0xD6, 0x7B, 0x80, 0x8A, 0x44, 0x8D,
    0x8C, 0x14, 0x21, 0x8E, 0x16, 0x44, 0x02, 0x00, 0x08, 0x18, 0x02, 0x63, 0x70, 0x00, 0x00, 0x38,
    0x20, 0x80, 0x00, 0x38, 0x20, 0x80, 0x00, 0x20, 0x20, 0x00, 0x00, 0x40, 0x1F, 0x80, 0x00, 0x10,
    0x17, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x03, 0xF0,
    };

    //std::ifstream input( R"(C:\Users\samue\PycharmProjects\WtFileUtils\tests\testFiles\top7500Clans.blk)", std::ios::binary);

    //std::vector<unsigned char> buffer(std::istreambuf_iterator<char>(input), {});
    auto x = std::make_shared<DataBlock>(); // root
    auto x1 = BaseReader((char*)data.data(), data.size(), false); // ignore
    x->loadFromStream(x1, nullptr, nullptr);
    //auto x2 = std::string("test1");
    //x->addStr("Helloo", x2);
    //std::cout << x->getRefCount() << "\n";
    x->printBlock(0, std::cout);
	//blk.addInt("test2", 1234);
	//blk.addReal("test3", 12.34f);
	//blk.addPoint2("test4", Point2(1.0f, 2.0f));
	//blk.addPoint3("test5", Point3(1.0f, 2.0f, 3.0f));
	//blk.addPoint4("test6", Point4(1.0f, 2.0f, 3.0f, 4.0f));
	//blk.addIPoint2("test7", IPoint2(1, 2));
	//blk.addIPoint3("test8", IPoint3(1, 2, 3));
}

int main() {
    std::cout << "Hello World!\n";
    //_CrtSetBreakAlloc(860093);
    //_CrtSetBreakAlloc(860092);
    //_CrtSetBreakAlloc(35776442);
    //_CrtSetBreakAlloc(35776441);
    exec_code();

    //_CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_DEBUG);
    //_CrtDumpMemoryLeaks();
}